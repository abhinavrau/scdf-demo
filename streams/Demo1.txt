
----------- Stream Demo ------------\
Setup:

- Run Dataflow docker-compose up
- Run Dataflow Shell

- Create table Demo_CurrencyPositions

CREATE TABLE IF NOT EXISTS Demo_CurrencyRates (
    ccypair CHAR(7),
    rate float,
    PRIMARY KEY (ccypair)
);


insert into dataflow.Demo_CurrencyRates values('eur/usd', 1.12147);
insert into dataflow.Demo_CurrencyRates values('gbp/usd', 1.2594);
insert into dataflow.Demo_CurrencyRates values('jpy/usd', 108.60);
SELECT * FROM dataflow.Demo_CurrencyRates;

update dataflow.Demo_CurrencyRates set rate = 1.320 where ccypair = 'eur/usd';


- Run "gfsh"
- Run "start locator --name=locator1"
- Run "start server --name=server1 --groups=group1"
- Run "create region --name=Positions --groups=group1 --type=REPLICATE"
- Run "query --query='SELECT * from /CurrencyRates'"


Stream 1:

jdbc-poller: jdbc --query='SELECT ccypair, rate from Demo_CurrencyRates' --initialization-mode=NEVER --time-unit=SECONDS --fixed-delay=5 | saveToCache: gemfire --host-addresses=host.docker.internal:10334 --key-expression=payload.getField('ccypair') --json=true --region-name=CurrencyRates


Stream 2:
listenToCache: gemfire --host-addresses=host.docker.internal:10334 --region-name=CurrencyRates  | websocket

Open webpage

Update the table
update dataflow.Demo_CurrencyPositions set rate = 1.320 where ccypair = 'eur/usd';

Change Transformer to websocket flow
stream update --name RatesToWeb --properties "app.transform.expression=payload.toUpperCase().concat('Euro to Dollar')"

Rollback
stream rollback --name RatesToWeb --releaseVersion 1

- FanIn - Show how we can add other sources (RabbitMQ, MongoDB etc.)
- Put a named destination and have Fan out
- Put a tap to show logging or different path


- Monitoring
- Labelling
- Application Count
- Named Destinations
- Fan-in and Fan-out
- Tapping
